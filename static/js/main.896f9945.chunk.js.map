{"version":3,"sources":["App.utility.js","components/KeyAndBaseSelector/KeyAndBaseSelector.jsx","components/NotesTable/NotesTable.utility.js","components/NotesTable/NotesTable.jsx","components/ChordNotation/ChordNotation.jsx","App.jsx","serviceWorker.js","index.js"],"names":["notes","keys","id","name","getRomanNumeral","number","KeyAndBaseSelector","selectedBase","selectedKey","onUpdateBase","onUpdateKey","value","onChange","event","target","map","noteIterator","key","keyIterator","twoOctaves","tonicDegrees","getTonicNotes","octave","degreeCounter","_","noteIndex","find","includes","dominantDegrees","getDominantNotes","subdominantDegrees","getSubdominantNotes","NotesRow","note","DegreesRow","getDegrees","degree","degreeIndex","FunctionRow","getFunctionNotes","heading","isIncluded","className","NotesTable","base","scaleStart","findIndex","slice","getOctave","SignSelector","ChordNotation","rowSpan","type","colSpan","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.896f9945.chunk.js","sourcesContent":["const notes = [\n  'C', 'C♯', 'D', 'D♯', 'E', 'F', 'F♯', 'G', 'G♯', 'A', 'A♯', 'B'\n]\n\nconst keys = [\n  {\n    id: 'major',\n    name: 'Major',\n    notes: [0, 2, 4, 5, 7, 9, 11]\n  },\n  {\n    id: 'naturalMinor',\n    name: 'Natural Minor',\n    notes: [0, 2, 3, 5, 7, 8, 10]\n  },\n]\n\nconst getRomanNumeral = number => (\n  ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII'][number - 1]\n)\n\nexport {\n  notes,\n  keys,\n  getRomanNumeral\n}\n","import React from 'react'\n\nimport {\n  notes,\n  keys\n} from '../../App.utility'\n\nconst KeyAndBaseSelector = ({\n  selectedBase,\n  selectedKey,\n  onUpdateBase,\n  onUpdateKey\n}) => (\n  <div>\n    <select\n      value={selectedBase}\n      onChange={event => {\n        onUpdateBase(event.target.value)\n      }}\n    >\n      {notes.map(noteIterator => (\n        <option\n          key={noteIterator}\n          value={noteIterator}\n        >\n          {noteIterator}\n        </option>\n      ))}\n    </select>\n    <select\n      value={selectedKey}\n      onChange={event => {\n        onUpdateKey(event.target.value)\n      }}\n    >\n      {keys.map(keyIterator => (\n        <option\n          key={keyIterator.id}\n          value={keyIterator.id}\n        >\n          {keyIterator.name}\n        </option>\n      ))}\n    </select>\n  </div>\n)\n\nexport default KeyAndBaseSelector\n","import {\n  notes,\n  keys,\n  getRomanNumeral\n} from '../../App.utility'\n\nconst twoOctaves = [...notes, ...notes]\n\nconst getOctave = base => {\n  const scaleStart = twoOctaves.findIndex(note => note === base)\n  return twoOctaves.slice(scaleStart, scaleStart + 12)\n}\n\nconst getDegrees = ({octave, key}) => {\n  let degreeCounter = 1\n  return octave.map((_, noteIndex) => {\n    if (keys.find(keyIterator => keyIterator.id === key).notes.includes(noteIndex)) {\n      return getRomanNumeral(degreeCounter++)\n    }\n    return null\n  })\n}\n\nconst tonicDegrees = [1, 3, 6]\nconst getTonicNotes = ({octave, key}) => {\n  let degreeCounter = 1\n  return octave.map((_, noteIndex) => {\n    if (keys.find(keyIterator => keyIterator.id === key).notes.includes(noteIndex)) {\n      if (tonicDegrees.includes(degreeCounter++)) {\n        return true\n      }\n    }\n    return false\n  })\n}\n\nconst dominantDegrees = [3, 5, 7]\nconst getDominantNotes = ({octave, key}) => {\n  let degreeCounter = 1\n  return octave.map((_, noteIndex) => {\n    if (keys.find(keyIterator => keyIterator.id === key).notes.includes(noteIndex)) {\n      if (dominantDegrees.includes(degreeCounter++)) {\n        return true\n      }\n    }\n    return false\n  })\n}\n\nconst subdominantDegrees = [2, 4, 6]\nconst getSubdominantNotes = ({octave, key}) => {\n  let degreeCounter = 1\n  return octave.map((_, noteIndex) => {\n    if (keys.find(keyIterator => keyIterator.id === key).notes.includes(noteIndex)) {\n      if (subdominantDegrees.includes(degreeCounter++)) {\n        return true\n      }\n    }\n    return false\n  })\n}\n\nexport {\n  getOctave,\n  getDegrees,\n  getTonicNotes,\n  getDominantNotes,\n  getSubdominantNotes\n}\n","import React from 'react'\n\nimport {\n  getOctave,\n  getDegrees,\n  getTonicNotes,\n  getDominantNotes,\n  getSubdominantNotes\n} from './NotesTable.utility'\n\nconst NotesRow = ({octave}) => (\n  <tr>\n    <td />\n    {octave.map(note => (\n      <th key={note}>{note}</th>\n    ))}\n  </tr>\n)\n\nconst DegreesRow = ({\n  octave,\n  selectedKey\n}) => (\n  <tr>\n    <th>Degree</th>\n    {getDegrees({\n      octave,\n      key: selectedKey\n    }).map((degree, degreeIndex) => (\n      <td key={degreeIndex}>{degree}</td>\n    ))}\n  </tr>\n)\n\nconst FunctionRow = ({\n  octave,\n  selectedKey,\n  getFunctionNotes,\n  heading\n}) => (\n  <tr>\n    <th>{heading}</th>\n    {getFunctionNotes({\n      octave,\n      key: selectedKey\n    }).map((isIncluded, degreeIndex) => (\n      <td\n        key={degreeIndex}\n        className={isIncluded ? 'highlighted' : ''}\n      />\n    ))}\n  </tr>\n)\n\nconst NotesTable = ({\n  selectedBase,\n  selectedKey\n}) => {\n  const octave = getOctave(selectedBase)\n  return (\n    <div>\n      <table>\n        <thead>\n          <NotesRow\n            octave={octave}\n          />\n        </thead>\n        <tbody>\n          <DegreesRow\n            octave={octave}\n            selectedKey={selectedKey}\n          />\n          <FunctionRow\n            heading='Tonic'\n            octave={octave}\n            selectedKey={selectedKey}\n            getFunctionNotes={getTonicNotes}\n          />\n          <FunctionRow\n            heading='Dominant'\n            octave={octave}\n            selectedKey={selectedKey}\n            getFunctionNotes={getDominantNotes}\n          />\n          <FunctionRow\n            heading='Subdominant'\n            octave={octave}\n            selectedKey={selectedKey}\n            getFunctionNotes={getSubdominantNotes}\n          />\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default NotesTable\n","import React from 'react'\n\nimport {getRomanNumeral} from '../../App.utility'\n\nconst SignSelector = () => (\n  <select>\n    <option></option>\n    <option>♯</option>\n    <option>♭</option>\n    <option>♮</option>\n  </select>\n)\n\nconst ChordNotation = () => (\n  <div>\n    <table>\n      <tbody>\n        <tr>\n          <td rowSpan=\"3\">\n            <select className=\"big\">\n              {[1, 2, 3, 4, 5, 6, 7].map(number => (\n                <option\n                  key={number}\n                  value={number}\n                >\n                  {getRomanNumeral(number)}\n                </option>\n              ))}\n            </select>\n          </td>\n          <td>\n            <input type=\"number\" />\n          </td>\n          <td>\n            <SignSelector />\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <input type=\"number\" />\n          </td>\n          <td>\n            <SignSelector />\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <input type=\"number\" />\n          </td>\n          <td>\n            <SignSelector />\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <SignSelector />\n          </td>\n          <td colSpan=\"2\"></td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n)\n\nexport default ChordNotation\n","import React, {useState} from 'react'\nimport './App.css'\n\nimport {\n  notes,\n  keys\n} from './App.utility'\n\nimport KeyAndBaseSelector from './components/KeyAndBaseSelector/KeyAndBaseSelector'\nimport NotesTable from './components/NotesTable/NotesTable'\nimport ChordNotation from './components/ChordNotation/ChordNotation'\n\nconst App = () => {\n  const [base, onUpdateBase] = useState(notes[0])\n  const [key, onUpdateKey] = useState(keys[0].id)\n\n  return (\n    <>\n      <KeyAndBaseSelector\n        selectedBase={base}\n        selectedKey={key}\n        onUpdateBase={onUpdateBase}\n        onUpdateKey={onUpdateKey}\n      />\n      <NotesTable\n        selectedBase={base}\n        selectedKey={key}\n      />\n      <ChordNotation />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}